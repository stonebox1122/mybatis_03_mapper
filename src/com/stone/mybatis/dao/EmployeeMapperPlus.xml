<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.stone.mybatis.dao.EmployeeMapperPlus">
	
	<!-- 
		resultMap：自定义某个javabean的封装规则
		type：自定义规则的Java类型
		id：唯一id，方便引用
	-->
	<resultMap type="com.stone.mybatis.bean.Employee" id="MyEmp">
		<!-- 
			id：指定主键列的封装规则 
			column：指定唯一列
			property：指定对应的javabean属性
		-->
		<id column="id" property="id"/>
		
		<!-- result：定义普通列封装规则 -->
		<result column="last_name" property="lastName"/>
		
		<!-- 其他不指定的列会自动封装，推荐只要写resultMap就把全部的映射规则都写上 -->
		<result column="email" property="email"/>
		<result column="gender" property="gender"/>
	</resultMap>
	
	<!-- public Employee getEmpById(Integer id); -->
	<select id="getEmpById" resultMap="MyEmp">
		select * from tbl_employee where id=#{id}
	</select>
	
	<!-- 
		场景1：查询Employee的同时查询员工的部门
	 -->
	 <!-- 联合查询：级联属性封装结果集 -->
	 <resultMap type="com.stone.mybatis.bean.Employee" id="MyDifEmp">
	 	<id column="id" property="id"/>
	 	<result column="last_name" property="lastName"/>
	 	<result column="gender" property="gender"/>
	 	<result column="did" property="dept.id"/>
	 	<result column="dept_name" property="dept.departmentName"/>
	 </resultMap>
	 
	 <!-- 使用association定义关联的单个对象的封装规则 -->
	 <resultMap type="com.stone.mybatis.bean.Employee" id="MyDifEmp2">
	 	<id column="id" property="id"/>
	 	<result column="last_name" property="lastName"/>
	 	<result column="gender" property="gender"/>
	 	<!-- 
	 		association：可以指定联合的javabean对象
	 		property="dept"：指定哪个属性是联合的对象
	 		javaType：指定这个属性对象的类型【不能省略】
	 	 -->
	 	<association property="dept" javaType="com.stone.mybatis.bean.Department">
	 		<id column="did" property="id"/>
	 		<result column="dept_name" property="departmentName"/>
	 	</association>
	 </resultMap>
	 
	<!-- public Employee getEmpAndDept(Integer id); -->
	<select id="getEmpAndDept" resultMap="MyDifEmp2">
		select e.id id,e.last_name last_name,e.gender gender,
				e.d_id d_id,d.id did,d.dept_name dept_name
		from tbl_employee e,tbl_dept d
		where e.d_id=d.id and e.id=#{id}
	</select>
	
	<!-- 
		使用association进行分步查询 
		1、先按照员工id查询员工信息
		2、根据查询员工信息的d_id值去部门表查询部门信息
		3、部门设置到员工中
	-->
	<resultMap type="com.stone.mybatis.bean.Employee" id="MyEmpByStep">
		<id column="id" property="id"/>
	 	<result column="last_name" property="lastName"/>
	 	<result column="email" property="email"/>
	 	<result column="gender" property="gender"/>
	 	<!-- 
	 		association定义关联对象的封装规则
	 		select： 表明当前属性是调用select指定的方法查询的结果
	 		column：指定将哪一列的值传给这个方法
	 		流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property属性
	 	-->
	 	<association property="dept" select="com.stone.mybatis.dao.DepartmentMapper.getDeptById" column="d_id">	
	 	</association>
	</resultMap>
	<!-- public Employee getEmpByIdStep(Integer id); -->
	<!-- <select id="getEmpByIdStep" resultMap="MyEmpByStep">
		select * from tbl_employee where id=#{id}
	</select> -->
	
	<!-- 
		分步查询可以使用延迟加载 ：
		在分步查询的基础上在全局配置文件中加上两个配置
	-->
	
	<!-- 场景2：查询部门的时候将部门对应的所有员工信息也查询出来，具体实现在DepartmentMapper.xml中 -->
	
	<!-- public List<Employee> getEmpsByDeptId(Integer deptId); -->
	<select id="getEmpsByDeptId" resultType="com.stone.mybatis.bean.Employee">
		select * from tbl_employee where d_id=#{deptId}
	</select>
	
	<!-- 
		<discriminator javaType=""></discriminator> 
		鉴别器：Mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为
		封装Employee：
			如果查出来的是女生，就把部门信息查询出来，否则不查询
			如果查出来的是男生，把last_name这一列的值赋值给email
	-->
	<resultMap type="com.stone.mybatis.bean.Employee" id="MyEmpDis">
		<id column="id" property="id"/>
	 	<result column="last_name" property="lastName"/>
	 	<result column="email" property="email"/>
	 	<result column="gender" property="gender"/>
	 	<!-- 
	 		column：指定判定的列名 
	 		javaType：列值对应的java类型
	 	-->
	 	<discriminator javaType="string" column="gender">
	 		<!-- 女生 -->
	 		<!-- resultType：指定封装的结果类型 -->
	 		<case value="0" resultType="com.stone.mybatis.bean.Employee">
	 			<association property="dept" select="com.stone.mybatis.dao.DepartmentMapper.getDeptById" column="d_id">	
	 			</association>
	 		</case>
	 		<!-- 男生，把last_name这一列的值赋值给email -->
	 		<case value="1" resultType="com.stone.mybatis.bean.Employee">
	 			<id column="id" property="id"/>
			 	<result column="last_name" property="lastName"/>
			 	<result column="last_name" property="email"/>
			 	<result column="gender" property="gender"/>
	 		</case>
	 	</discriminator>
	</resultMap>
	<select id="getEmpByIdStep" resultMap="MyEmpDis">
		select * from tbl_employee where id=#{id}
	</select>
	
</mapper>