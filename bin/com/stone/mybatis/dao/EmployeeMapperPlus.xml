<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.stone.mybatis.dao.EmployeeMapperPlus">
	
	<!-- 
		resultMap：自定义某个javabean的封装规则
		type：自定义规则的Java类型
		id：唯一id，方便引用
	-->
	<resultMap type="com.stone.mybatis.bean.Employee" id="MyEmp">
		<!-- 
			id：指定主键列的封装规则 
			column：指定唯一列
			property：指定对应的javabean属性
		-->
		<id column="id" property="id"/>
		
		<!-- result：定义普通列封装规则 -->
		<result column="last_name" property="lastName"/>
		
		<!-- 其他不指定的列会自动封装，推荐只要写resultMap就把全部的映射规则都写上 -->
		<result column="email" property="email"/>
		<result column="gender" property="gender"/>
	</resultMap>
	
	<!-- public Employee getEmpById(Integer id); -->
	<select id="getEmpById" resultMap="MyEmp">
		select * from tbl_employee where id=#{id}
	</select>
	
	<!-- 
		场景1：查询Employee的同时查询员工的部门
	 -->
	 <!-- 联合查询：级联属性封装结果集 -->
	 <resultMap type="com.stone.mybatis.bean.Employee" id="MyDifEmp">
	 	<id column="id" property="id"/>
	 	<result column="last_name" property="lastName"/>
	 	<result column="gender" property="gender"/>
	 	<result column="did" property="dept.id"/>
	 	<result column="dept_name" property="dept.departmentName"/>
	 </resultMap>
	<!-- public Employee getEmpAndDept(Integer id); -->
	<select id="getEmpAndDept" resultMap="MyDifEmp">
		select e.id id,e.last_name last_name,e.gender gender,
				e.d_id d_id,d.id did,d.dept_name dept_name
		from tbl_employee e,tbl_dept d
		where e.d_id=d.id and e.id=#{id}
	</select>
	
</mapper>